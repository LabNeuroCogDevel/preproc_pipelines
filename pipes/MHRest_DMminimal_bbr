#!/usr/bin/bash
PIPE_FOR="DM"
PIPE_DESC80="Minimal for pet rest"
PIPE_DESC="
Generic minimal pipeline with Distortion Correction (FM)
TEMPLATE_RES default to 2.3
"
PIPE_DEPENDS=("MHT1_2mm" )
[ -z "$NO_FM" ] && PIPE_DEPENDS=("MHT1_2mm" "ppDistortion" )

PIPE_VERSION="20180505" # initial
PIPE_VERSION="20180514" # allow no ppDistortion
PIPE_VERSION="20180711" # handle ref and hdr files

FINALOUT=( "alltasks_preproc_complete" )

function check_complete {
 wantonlyoneid $@ || return 1
 has_finalout  $1 || return 1
 return 0
}

function run_pipeline {
 id="$1"
 [ -z "$id" ] && warn "$FUNCNAME: no id given" && return 1
 #[ -z "$FM_CFG" ] && warn "$FUNCNAME: no FM_CFG in env!" && return 1

 DISTORTION_OPTS=""
 if [ -z "$NO_FM" ]; then
   distortion_dir=$(cd ../ppDistortion/$id/unwarp; pwd)
   [ -z "$distortion_dir" -o "$distortion_dir" == $(pwd) ] && 
     warn "$id: no distortion dir" && return 1
   DISTORTION_OPTS="-distortion_dir $distortion_dir "
 fi

 # previous mt (motion+slicetiming)
 pipelinedir=$(pwd)
 prevMT=$(find $pipelinedir/../*/$id/ -iname 'tm_func.nii.gz' -type f| grep -v '\.\./MHRest_DMminimal/' |  sed 1q)

 [ ! -d "$id" ] && mkdir $id
 cd $id

 #ref=$(subj_ref $id)
 #read mag phase < <(find_fm $id)
 #mag="../../MHFM/$id/mrmag/MR*"
 #phase="../../MHFM/$id/mrphase/MR*"
 read bet warp  < <(find_t1final $id)
 for v in bet warp; do # t2 mag phase 
   [ -z "${!v}" ] && warn "# cannot find $v for $id" && return 1
 done

 # which funcation to use for finding epi
 findepi=subj_t2s
 [ -z "$(type subj_t2s 2>/dev/null)" ] && findepi=subj_t2 

 # create nii.gz from analize fmt (img hdr)
 # find inputs
 nt2=$($findepi $id |wc -l)
 [  "$nt2" -eq 0 ] && warn "# $id: cannot find any t2s (in $(pwd) with '$findepi')" && return 1

 maindir=$(pwd)


 local cnt=0

 # if we can, steal motion and slice time correction
 # -- dont try to take if we already have one (rerunning)
 if [ -n "$prevMT" -a -r "$prevMT" -a ! -r tm_func.nii.gz ]; then
    ln -s $prevMT ./
    cp $(dirname $prevMT)/tm_func_tmean.nii.gz ./
    cp $(dirname $prevMT)/mc_target.nii.gz ./
    cp $(dirname $prevMT)/motion.par ./
    cp -r $(dirname $prevMT)/mc_mats ./
    echo "$(date +%F) # copied from $prevMT" > .motion_correction_complete 
    echo "$(date +%F) # copied from $prevMT" > .slice_timing_complete
 fi

 [ -z "$TEMPLATE_RES" ] && TEMPLATE_RES=MNI_2.3mm && SMOOTH_KERNEL=4
 [ -z "$SMOOTH_KERNEL" ] && SMOOTH_KERNEL=5
 [ -n "$SLICESETTINGSFILE" ] && SLICEOPTIONS="-custom_slice_times $SLICESETTINGSFILE"
 #SLICESETTINGSFILE=/Volumes/Phillips/mMR_PETDA/scripts/sliceTimings.1D 

 # for each t2 (using 'subjs_ts $id | while read' makes cnt inaccessible)
 while read t2nii name; do
    [ -z "$t2nii" -o ! -r "$t2nii" ] && warn "# $id: provided t2 ('$t2nii') does not exist (task '$name')" && continue 
    rundir=$maindir/$name
    [ ! -d "$rundir" ] && mkdir "$rundir"
    if [ ! -e "$rundir/func.nii.gz" ]; then 
       if   [[ $t2nii =~ .hdr$ ]]   ; then 3dcopy $t2nii "$rundir/func.nii.gz";
       elif [[ $t2nii =~ .nii.gz$ ]]; then  ln -s "$t2nii" "$rundir/func.nii.gz";
       else                           echo "dont know what to do with input file like $t2nii" && return 1;
       fi
    fi

    # add reference volume if we have one
    REF_OPTS=""
    ref="$(subj_ref $id || echo "")"
    [ -n "$ref" -a -r "$ref" -a ! -r $rundir/func_ref.nii.gz ] && 3dcopy $ref $rundir/func_ref.nii.gz && REF_OPTS=" -func_refimg func_ref.nii.gz "

    cd "$rundir"
    if [ -r .preprocessfunctional_complete ]; then 
      let ++cnt
      continue
    else
      warn "no file $(pwd)/.preprocessfunctional_complete"
    fi

    #-func_refimg functional_ref.nii.gz \
    #-nuisance_regression 6motion,d6motion,csf,dcsf,wm,dwm \
    #-custom_slice_times /Volumes/Phillips/mMR_PETDA/scripts/sliceTimings.1D \
    # -hp_filter 40
    yes | preprocessFunctional \
       -tr $FUNCTR -slice_acquisition $FUNCSLICEACQ \
       -4d func.nii.gz \
       $REF_OPTS \
       -no_smooth \
       -mprage_bet $bet -warpcoef $warp \
       -4d_slice_motion  \
       $DISTORTION_OPTS \
       -rescaling_method 10000_globalmedian \
       -template_brain "$TEMPLATE_RES" \
       -func_struc_dof bbr  \
       -warp_interpolation spline  \
       -constrain_to_template y  \
       $SLICEOPTIONS \
       -nuisance_file nuisance_regressors.txt \
       -nuisance_compute 6motion,d6motion,csf,dcsf,wm,dwm  || echo "$(pwd): preprocessFunctional returned error!"

   # success, so increment count
   [ -r .preprocessfunctional_complete ] && let ++cnt
 done < <( $findepi $id 2>/dev/null )

 # track when finished
 warn "have cnt=$cnt"
 cd $maindir
 if [ $cnt -eq $nt2 ]; then
   echo "$(date) finished $nt2" >>  "alltasks_preproc_complete"
 else
  warn "$id finished preproc of only '$cnt' of '$nt2' tasks"
  return 1
 fi

 return 0
}
