#!/usr/bin/bash
PIPE_VERSION="20191114" # using interleaved and ppDist
PIPE_FOR="FC"
PIPE_DESC80="Initial for ncanda"
PIPE_DESC="
Generic task pipeline with Distortion Correction (FM)
TEMPLATE_RES default to 2.3
does not include ICA aroma
no slice time correct
premature stop after depiking
"
PIPE_DEPENDS=("MHT1_2mm" "ppDistortion")
FINALOUT=( "all_preproc_complete" )

function check_complete {
 wantonlyoneid $@ || return 1
 has_finalout  $1 || return 1
 return 0
}

function run_pipeline {
 id="$1"
 [ -z "$id" ] && warn "$FUNCNAME: no id given" && return 1
 #[ -z "$FM_CFG" ] && warn "$FUNCNAME: no FM_CFG in env!" && return 1

 declare -f subj_sliceacq >/dev/null && FUNCSLICEACQ=$(subj_sliceacq "$id")
 # otherwise should be set globally
 [ -z "$FUNCSLICEACQ" ] && warn "pipeline requires FUNCSLICEACQ. Not provided by source!" && return 1

 [ ! -d "$id" ] && mkdir $id
 cd $id

 #ref=$(subj_ref $id)
 #read mag phase < <(find_fm $id)
 #mag="../../MHFM/$id/mrmag/MR*"
 #phase="../../MHFM/$id/mrphase/MR*"
 read bet warp  < <(find_t1final $id)
 for v in bet warp; do # t2 mag phase 
   [ -z "${!v}" ] && warn "# cannot find $v for $id" && return 1
 done

 # which funcation to use for finding epi
 findepi=subj_t2s
 [ -z "$(type -f subj_t2s 2>/dev/null)" ] && findepi=subj_t2 

 # create nii.gz from analize fmt (img hdr)
 # find inputs
 nt2=$($findepi $id |wc -l)
 [  "$nt2" -eq 0 ] && warn "# $id: cannot find any t2s ($(pwd))" && return 1

 maindir=$(pwd)


 local cnt=0

 [ -z "$TEMPLATE_RES" ] && TEMPLATE_RES=MNI_2.3mm && SMOOTH_KERNEL=4
 [ -z "$SMOOTH_KERNEL" ] && SMOOTH_KERNEL=5
 [ -z "$TRUNC_VOLS" ] && trunc_arg="" || trunc_arg="-trunc $TRUNC_VOLS"
 [ -n "$SLICESETTINGSFILE" ] && SLICEOPTIONS="-custom_slice_times $SLICESETTINGSFILE"
 #SLICESETTINGSFILE=/Volumes/Phillips/mMR_PETDA/scripts/sliceTimings.1D 

 # for each t2 (using 'subjs_ts $id | while read' makes cnt inaccessible)
 while read t2nii name; do
    [ -z "$t2nii" -o ! -r "$t2nii" ] && warn "# $id: provided t2 ('$t2nii') does not exist (task '$name')" && continue 
    rundir=$maindir/$name
    [ ! -d "$rundir" ] && mkdir "$rundir"
    [ ! -e "$rundir/func.nii.gz" ] && ln -s "$t2nii" "$rundir/func.nii.gz"
    cd "$rundir"
    if [ -r .preprocessfunctional_complete ]; then 
      let ++cnt
      continue
    else
      warn "no file $(pwd)/.preprocessfunctional_complete"
    fi

    distortion_dir="$(cd ../../ppDistortion/$id/unwarp && pwd)"
    [ -z "$distortion_dir" ] && return 1


    # want to rewrite/rerun these
    test -r .preproc_cmd && rm $_
    # # in previous run, bbr was not run?!
    # test -r .func2struct_complete && rm $_

    yes | preprocessFunctional \
       -partial_proc smooth \
       -4d func.nii.gz \
       -distortion_dir $distortion_dir \
       -slice_acquisition $FUNCSLICEACQ \
       -tr $FUNCTR  \
       $trunc_arg \
       -4d_slice_motion \
       -wavelet_despike  \
       -wavelet_threshold 10 \
       -func_struc_dof bbr  \
       -warp_interpolation spline  \
       -constrain_to_template y  \
       -smoothing_kernel $SMOOTH_KERNEL \
       -ica_aroma \
       -mprage_bet $bet -warpcoef $warp \
       -threshold 98_2 \
       -motion_censor fd=0.3,dvars=20  \
       -bandpass_filter 0.009 .08  \
       -rescaling_method 10000_globalmedian \
       -template_brain MNI_2mm  \
       -nuisance_file nuisance_regressors.txt \
       -nuisance_compute csf,dcsf,wm,dwm \
       -nuisance_regression 6motion,d6motion,csf,dcsf,wm,dwm || echo "$(pwd): preprocessFunctional returned error!"

   # success, so increment count
   [ -r .preprocessfunctional_complete ] && let ++cnt
 done < <( $findepi $id 2>/dev/null )

 # track when finished
 warn "have cnt=$cnt"
 cd $maindir
 if [ $cnt -eq $nt2 ]; then
   echo "$(date) finished $nt2" >>  "all_preproc_complete"
 else
  warn "$id finished preproc of only '$cnt' of '$nt2' tasks"
  return 1
 fi

 return 0
}
