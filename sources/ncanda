#!/usr/bin/env bash
# 80 char description
SOURCE_DESC80="NCANDA full dataset baseline - year2"

SUBJECTS_DIR="/DNE/" # no freesurfer currently
DICOM_PAT="*NONE" # no dicoms, comes from dataset

FUNCTR="2.2" 
FUNCSLICEACQ="" # have both GE and seiemns (interlaved), see func below
TEMPLATE_RES=MNI_3mm 
SMOOTH_KERNEL=5
TRUNC_VOLS=5

MRROOT="/DNE/"
NIIROOT="/Volumes/Hera/Raw/Datasets/NCANDA/"
DBFILE="$NIIROOT/id_t1_epi.tsv"
DBSITE="$NIIROOT/id_site.tsv"

scannerargs=""

# TODO: make config for ncanda 
FM_CFG=""
_mkndcandasite(){
   [ -r $DBSITE -a -z "$REDODBFILE" ] && return 0
	perl -F, -slane 'next unless m/(baseline|followup_(\d+)y)/; $y=$2?$2:0; $F[0]=~s/NCANDA_//;print "$F[0]_$y\t$F[3]"'\
      $NIIROOT/*/*REDCAP*/summaries/redcap/demographics.csv|
      sort -u |tee $DBSITE
}
_mkncandadb() {
 # have 5 visits: find all that have both t1 and rest and
 #  create session id like 'ncandaid_year' where baseline = year 0 to so 1y and 2y match raw directory names
 #  /Volumes/Hera/Raw/Datasets/NCANDA/baseline/NCANDA_IMAGEDATA_00012_V01/cases/NCANDA_S00095/standard/baseline/structural/native/t1.nii.gz
 #  /Volumes/Hera/Raw/Datasets/NCANDA/followup_1y/NCANDA_RELEASE_1Y_STRUCTURAL_IMAGES_V01/cases/NCANDA_S01009/standard/followup_1y/structural/native/t1.nii.gz
 [ -r $DBFILE -a -z "$REDODBFILE" ] && return 0
 # break into id (baseline, followup_1y, followup_2y, ...) and full path to t1.nii.gz
 # find resting state t2
 find $NIIROOT -name 't1.nii.gz' -path '*/structural/native/*' | 
  perl -MFile::Find -lne '
     if(m:NCANDA_(S\d+)/.*/(baseline|followup_\dy)/:){
       $id=$1; $y=$2;$t1=$_;
       $y=~s/baseline/0/;$y=~s/followup_(\d)y/\1/;
       $a{"${id}_${y}"}=$t1;
    }END{
      print "$_\t$a{$_}" for (sort keys %a);
    }' |
  while read id t1; do
    t2=$(dirname $t1)
    t2=${t2/NCANDA_*\/case/*/case}  
    t2=${t2/structural\//restingstate/}  
    t2=$(find $t2 -name 'bold-001.nii.gz' || echo "")
    [ -n "$t2" ] && echo -e "$id\t$t1\t$t2" || :
  done |tee  $DBFILE
}

function list_all {
   # just the ids from DBFILE
   _mkncandadb
   cut -f1 $DBFILE
}



function subj_t1 {
 wantonlyoneid $@ || return 1
 _mkncandadb
 awk -v id="$1" '($1==id){print $2; quit}' $DBFILE
}

function subj_t2 {
 wantonlyoneid $@ || return 1
 local t2=$(awk -v id="$1" '($1==id){print $3; quit}' $DBFILE)
 [ -z "$t2" ] && echo "$FUNCNAME: no id $1" >&2 && return 1
 [ ! -r functional.nii.gz ] && 3dTcat -prefix functional.nii.gz -tr $FUNCTR ${t2/-001/*}
 [ -r functional.nii.gz ] && echo functional.nii.gz || return 1
 return 0
}

subj_sliceacq() {
 wantonlyoneid $@ || return 1
 _mkndcandasite
 echo interleaved
 return 0
 # determine baed on site
 perl -lne '
   BEGIN{ %site=("A"=>"interleaved","B"=>"GE", "C"=>"GE", "E"=>"GE",  "D"=>"interleaved"); }
   if(/'"$1"'\t([A-Z])/) {
      print $site{$1};
      last}' $DBSITE 

}

subj_fm_type() {
 wantonlyoneid $@ || return 1
 _mkndcandasite
 #  548 GE B
 #  608 GE C
 #  926 GE E
 #  445 Siemens A
 #  623 Siemens D
 #    1 Siemens C
 perl -lne 'BEGIN{ %site=("A"=>"ncanda siemens","B"=>"ncanda ge", "C"=>"ncanda ge rev", "E"=>"ncanda ge",  "D"=>"ncanda siemens"); }
 if(/'"$1"'\t([A-Z])/) {print $site{$1}; last}' $DBSITE 
}
fm_cfg(){
 wantonlyoneid $@ || return 1
 subj_fm_type $1 | grep -q ge && echo "ncanda-ge" || echo "ncanda-siemens"
 return 0
}
subj_fm(){
 wantonlyoneid $@ || return 1
 _mkndcandasite

 local fmd=$(awk -v id="$1" '($1==id){print $3; quit}' $DBFILE)
 [ -z "$fmd" ] && return 1
 fmd=$(dirname ${fmd/rs-fMRI/fieldmap})
 #/Volumes/Hera/Datasets/NCANDA/followup_4y/NCANDA_RELEASE_4Y_RESTINGSTATE_IMAGES_V01/cases/NCANDA_S00234/standard/followup_4y/restingstate/native/fieldmap
 [ ! -d $fmd ] && warn "cannot find '$fmd'" && return 1
 echo "$fmd"
 return 0
}


function subj_physio {
 wantonlyoneid $@ || return 1
 return 0
}
